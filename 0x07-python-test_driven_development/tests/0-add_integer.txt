Test cases for add_integer function
>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(1, 2)
3
>>> add_integer(1.1, 2.1)
3
>>> add_integer(2)
100
>>> add_integer(1.1, "bashar")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/bashar/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 15, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
>>> add_integer("anas")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/bashar/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer("Ahmed",)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/bashar/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer(1, [1, 2, 3])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/bashar/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 16, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
>>> add_integer(0,0)
0
>>> add_integer(-123.1,1)
-122
>>> add_integer(123,-1.1)
122
